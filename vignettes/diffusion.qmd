---
title: "Incorporating predation diffusion"
bibliography: diffusion_references.bib
toc: true
crossref:
  eq-prefix: Eq.
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(mizerEcopath)
library(ggplot2)
params <- NS_params
```

# The jump-growth equation {#sec-jump-growth}

As was observed in [@datta2010], the variability in prey size leads to a diffusion term in the PDE for the abundance density $N(w,t)$. This term is neglected in mizer but will become important when matching mizer abundances to observed abundances, because it will account for fish that are larger than average. The PDE including the diffusion term is
$$
\frac{\partial N}{\partial t} = \frac12 \frac{\partial^2}{\partial w^2}(d N) - \frac{\partial}{\partial w}(g N)-\mu N
$$ {#eq-PDE}
where $g$ is the growth rate, $\mu$ is the death rate and $d$ is a new diffusion rate.

The diffusion rate has an expression that is similar to that of the growth rate. Recall that the growth rate is given by
$$
\begin{split}
g(w)=&(1-f(w))\,\gamma(w)\int N_c(w_p)\phi(w/w_p)\alpha\,(1-\psi(w)) w_p\,dw_p\\
&- K(w)(1-\psi(w)),
\end{split}
$$ {#eq-gw}
where $N_c(w)$ is the abundance density of prey, $\phi(w/w_p)$ is the predation kernel, $\gamma(w)$ is the search volume, $f(w)$ is the feeding level, $K(w)$ is the metabolic respiration rate, $\alpha$ is the conversion efficiency and $\psi(w)$ is the proportion of available energy that is invested into reproduction. Because the metabolic respiration loss is subtracted from the available energy before that is split into growth and reproduction, only a proportion $1-\psi$ of the metabolic rate is subtracted from the growth rate.

The factor $\alpha (1- \psi(w))w_p$ in the integral in @eq-gw is the increase in somatic weight of the predator resulting from the ingestion of the prey of weight $w_p$. In the expression for the diffusion rate $d(w)$ this factor is squared:
$$
d(w) = (1-f(w))\,\gamma(w) \int N_c(w_p)\phi(w/w_p)(\alpha\,(1-\psi(w)) w_p)^2\,dw_p.
$$ {#eq-dw}
The loss due to metabolic respiration affects the growth rate but not the diffusion rate. In the derivation of the PDE @eq-PDE in [@datta2010] the metabolic respiration was not discussed but its contribution to only the first-order derivative term can be found in [@capitan2010].

The increase $\alpha (1- \psi(w))w_p$ in predator mass is typically only a small proportion of the predator mass because the preferred prey are typically much smaller than the predator and also $\alpha$ and $1-\psi(w)$ are both smaller than $1$. Because this factor is squared in the expression for $d(w)$ it might be expected that the term in the PDE involving $d(w)$ can be safely neglected. However it is worth testing this intuition. We will do this now by first determining the diffusion rate in a model with allometric growth and death rates. We will then use that to determine its effect on the slope of the juvenile spectrum. Finally we will look at the numerical solution for the steady state.

# Example calculation of diffusion rate {#sec-diffusion-example}

Let us assume that the prey abundance is given by a power law: $N_c(w)=N_0w^{-\lambda}$ and that the predation kernel is
$$
\phi(w/w_p) = \exp\left(-\frac{\log(w/w_p/\beta)^2}{2\sigma^2}\right).
$$ {#eq-phi}

For juveniles $\psi(w)=0$ and hence the integral in the expression @eq-gw for the growth rate becomes
$$
I_g:=\int N_c(w_p)\phi(w/w_p)\alpha\,(1-\psi(w)) w_p\,dw_p =
\alpha\int w_p^{1-\lambda}\exp\left(-\frac{\log(w/w_p/\beta)^2}{2\sigma^2}\right)dw_p.
$$ {#eq-Ig}
This integral can be evaluated most easily by changing integration variable to $x=\log(w_p/w_0)$for an arbitrary reference weight $w_0$ and then recognising the resulting integral
$$
I_g=\alpha\, w_0^{2-\lambda}\int e^{(2-\lambda)x}\exp\left(-\frac{(x-\log(w/w_0)+\log(\beta))^2}{2\sigma^2}\right)dx
$$ {#eq-Ig2}
as a Gaussian integral. Using the general result that
$$
\int e^{ax}\exp\left(-\frac{(x-\mu)^2}{2\sigma^2}\right)dx = \sqrt{\frac{2\pi}{\sigma^2}}\exp\left(a\mu+\frac{a^2\sigma^2}{2}\right)
$$ {#eq-gaussian}
with $a = 2-\lambda$ and $\mu = \log(w)-\log(\beta)$ we find that 
$$
\begin{split}
I_g&=
\alpha\, w_0^{2-\lambda}\sqrt{\frac{2\pi}{\sigma^2}}\exp\left((2-\lambda)(\log(w/w_0)-\log(\beta))+\frac{(2-\lambda)^2\sigma^2}{2}\right)\\
&=\alpha w^{2-\lambda}\sqrt{\frac{2\pi}{\sigma^2}}\beta^{\lambda - 2}\exp\left(\frac{(2-\lambda)^2\sigma^2}{2}\right)
\end{split}
$$ {#eq-Ig3}

Assuming further a constant feeding level $f(w)=f$, an allometric metabolic loss rate $K(w) = k_s w^n$ and an allometric search volume $\gamma(w)=\gamma w^q$ with an exponent of $q = n + 2 - \lambda$ we obtain
$$
g(w) = \left((1-f)\gamma \alpha \sqrt{\frac{2\pi}{\sigma^2}}\beta^{\lambda - 2}\exp\left(\frac{(2-\lambda)^2\sigma^2}{2}\right)-k_s\right) w^n.
$$ {#eq-gw2}
If we assume further that the metabolic loss is a fraction $f_c/f$ of the incoming energy (we refer to $f_c$ as the critical feeding level) then this simplifies to
$$
g(w) =\left( \left(1-\frac{f_c}{f}\right)(1-f)\gamma \alpha \sqrt{\frac{2\pi}{\sigma^2}}\beta^{\lambda - 2}\exp\left(\frac{(2-\lambda)^2\sigma^2}{2}\right)\right) w^n.
$$ {#eq-gwe}

We can evaluate the diffusion rate $d(w)$ in the same manner. The extra factor of $w_p$ changes $a$ from $2-\lambda$ to $3-\lambda$ and we obtain
$$
d(w) = \left((1-f(w))\gamma \alpha^2 \sqrt{\frac{2\pi}{\sigma^2}}\beta^{\lambda - 3}\exp\left(\frac{(3-\lambda)^2\sigma^2}{2}\right)\right) w^n.
$$ {#eq-dw2}
Comparing this to the expression @eq-gwe for $g(w)$ we find that
$$
d(w) = g(w)w\frac{1}{1-f_c/f}\frac{\alpha}{\beta}\exp\left(\frac{(2\lambda - 3)\sigma^2}{2}\right).
$$ {#eq-dw3}

To get a feel for the typical magnitude of the factor let's consider concrete values 
$$
(1-f_c/f)=0.6, \qquad\alpha = 0.8, \qquad\beta = 100, \qquad\sigma = 2, \qquad\lambda = 2.
$$ {#eq-params}
```{r}
#| include: false
feeding_coeff <- 0.6
alpha <- 0.8
beta <- 100
sigma <- 2
lambda <- 2
factor <- 1/(1 - feeding_coeff) * alpha / beta * exp((2 * lambda - 3) * sigma^2 / 2)
```

Then 
$$
d(w) \approx `r round(factor, digits = 2)` g(w)w.
$$ {#eq-dw4}

```{r}
#| include: false
sigma <- 1
factor_1 <- 1/(1 - feeding_coeff) * alpha / beta * exp((2 * lambda - 3) * sigma^2 / 2)
```
However we see that the value of $d(w)$ is strongly influenced by the width of the feeding kernel. If we choose $\sigma = 1$ then $d(w)\approx `r round(factor_1, digits = 2)` g(w)w$. This decrease in the diffusion rate with decreasing $\sigma$ may explains the result from [@datta2010a] that the stability of the system decreases with decreasing $\sigma$.

# Effect on juvenile slope {#sec-diffusion-juvenile}

In this section we will calculate the effect of the diffusion on the slope of the juvenile spectrum in the steady state. You can skip this section if you are not interested in the details of the calculation. The outcome is that the change in the juvenile slope is small. However, the change in the size spectrum of the adults is much larger, as we will see in @sec-diffusion-numerical.

Without diffusion we find the juvenile spectrum by solving the steady-state equation
$$
\frac{\partial}{\partial w}(g(w) N(w)) =-\mu(w) N(w).
$$ {#eq-ss}
This has the solution
$$
N(w) = \frac{g(w_0)}{g(w)}N(w_0)\exp\left(-\int_{w_0}^w\frac{\mu(w')}{g(w')}dw'\right).
$$ {#eq-Nw}
With allometic growth and death rates $g(w)=g_0w^n$ and $\mu(w)=\mu_0w^{n-1}$ this gives
$$
N(w)=\left(\frac{w}{w_0}\right)^{-n} N(w_0)\exp\left(-\frac{\mu_0}{g_0}\int_{w_0}^w\frac{1}{w'}dw'\right)=N(w_0)\left(\frac{w}{w_0}\right)^{-\mu_0/g_0-n}
$$ {#eq-Nwss}.
Thus the juvenile steady state abundance density is given by a power law with exponent $-\mu_0/g_0-n$.

In the presence of diffusion the steady state equation becomes the second-order ODE
$$
\frac12 \frac{\partial^2}{\partial w^2}(d N) - \frac{\partial}{\partial w}(g N)-\mu N=0.
$$ {#eq-diffss}

We have seen in the previous section that with $g(w)=g_0w^n$ the diffusion rate is also a power law with one extra factor of $w$: $d(w)=d_0w^{n+1}$. This makes the equation @eq-diffss scale invariant and hence we again expect the solution to be a power law, So we make the Ansatz $N(w)=N(w_0)(w/w_0)^a$ with the exponent $a$ to be determined. Substituting this Ansatz into @eq-diffss gives
$$
\frac12 d_0N_0(n+1+a)(n+a)w^{n+a-1} -g_0N_0(n+a)w^{n+a-1}-\mu_0 N_0w^{n-1+a} = 0
$$ {#eq-diffssansatz}
which requires that
$$
\frac12 d_0(n+1+a)(n+a) -g_0(n+a)-\mu_0= 0.
$$ {#eq-diffssansatz2}
This is a quadratic equation for $n+a$:
$$
\frac12 d_0 (n+a)^2+\left(\frac12 d_0 -g_0\right)(n+a)-\mu_0=0.
$$ {#eq-diffssansatz3}
This has two solutions
$$
(n+a_\pm) = \frac1{d_0}\left(g_0-d_0/2\pm\sqrt{(g_0-d_0/2)^2+2d_0\mu_0}\right)
$$ {#eq-a}
where $a_+$ is the solution with the + sign and $a_-$ is the solution with the - sign.

We are only interested in the solution that goes to $a=-\mu_0/g_0-n$ when $d_0\to 0$. This means we are interested in the solution with the - sign. To check that indeed the solution $a_{-}$ satisfies $\lim_{a_-\to 0}= -\mu_0/g_0-n$ it is helpful to expand the square root term around $d_0=0$:
$$
\sqrt{(g_0-d_0/2)^2+2d_0\mu_0}=g_0+\frac{-g_0+2\mu_0}{2g_0}d_0+\frac{g_0^2-(-g_0+2\mu_0)^2}{8g_0^3}d_0^2+\dots
$$ {#eq-sqrt}
So we find
$$
\begin{split}
a &= -n+\frac1{d_0}\left(g_0-d_0/2-\sqrt{(g_0-d_0/2)^2+2d_0\mu_0}\right)\\
&\approx -n-\frac{\mu_0}{g_0} - \frac18\left(1-\left(-1+2\frac{\mu_0}{g_0}\right)^2\right) d_0+\dots\\
&=-n-\frac{\mu_0}{g_0} +\frac12\left(\frac{\mu_0}{g_0}\left(1-\frac{\mu_0}{g_0}\right)\right)\frac{d_0}{g_0}+\dots
\end{split}
$$ {#eq-a-2}

We see that when $\mu_0=g_0$ then the first correction term to the juvenile slope vanishes. The largest increase in slope (i.e., the least negative slope) is achieved when $\mu_0/g_0=1/2$. In that case the slope without diffusion is $-1.25$ (assuming $n=0.75$). The correction term then is $d_0/(8g_0)$. We had already seen in the previous section that $d_0/g_0$ is typically very small, so the change in slope is also very small.

Using the example value of $d_0/g_0\approx`r round(factor, digits=2)`$ and $n=0.75$ we get a slope correction of approximately $`r round(factor/8, digits=3)`$ from $-1.25$ to $`r round(factor/8-1.25, digits=3)`$.

Using the value $d_0/g_0\approx`r round(factor_1, digits=2)`$ we get a smaller slope correction of approximately $`r round(factor_1/8, digits=3)`$ from $-1.25$ to $`r round(factor_1/8-1.25, digits=3)`$. 

When $\mu_0/g_0>1$ then the diffusion correction is negative, i.e., the juvenile slope becomes more negative due to diffusion, meaning fewer large fish.

# Transforming to logarithmic weight {#sec-diffusion-log}

Mizer works with logarithmically-spaced weight bins. That is good, but it makes it complicated to work out numerical schemes for solving the equations. It is much easier to work with equally-spaced bins. The obvious solution is to view the logarithm of the weight as the independent variable instead of the weight. So we will work with
$$
x = \log(w/w_0)
$$ {#eq-x}
where $w_0$ is an arbitrary reference weight.
That transforms the logarithmically-spaced bins in $w$ to equally-spaced bins in $x$.

```{r}
w <- w(params)
x <- log(w / w[1])
h <- x[2] - x[1]
```

We should then also work with the abundance density as a function of $x$. Let's denote it by $n(x)$. It is related to the abundance density $N(w)$ by
$$
n(x)dx = N(w)dw
$$ {#eq-nx}
where $dx = dw/w$ is the differential in $x$.
Because $dx = dw / w$ this means $N(w)=n(x)/w$. 

By the chain rule we have
$$
\frac{\partial}{\partial w} = \frac{\partial x}{\partial w}\frac{\partial}{\partial x} = \frac{1}{w}\frac{\partial}{\partial x}
$$ {#eq-dxw}

We can now transform the PDE @eq-PDE for $N(w,t)$ into a PDE for $n(x,t)$:
$$
\frac{\partial n}{\partial t} = \frac12 \frac{\partial}{\partial x}\left(\frac{1}{w}\frac{\partial}{\partial x}\frac{d n}{w}\right) - \frac{\partial}{\partial x}\left(\frac{g n}{w}\right)-\mu n
$$ {#eq-PDEx}
We rewrite this using that
$$
\frac{1}{w}\frac{\partial}{\partial x}\frac{d n}{w} = \frac{\partial}{\partial x}\frac{d n}{w^2}+\frac{d n}{w^2}
$$ {#eq-dxw2}
Introducing the rescaled growth and diffusion rates
$$
\tilde{g} = \frac{g}{w}-\frac12\frac{d}{w^2},~~~~\tilde{d}=\frac{d}{w^2}
$$ {#eq-tildegd}
simplifies the PDE @eq-PDEx to
$$
\frac{\partial n}{\partial t} = \frac12 \frac{\partial^2}{\partial x^2}(\tilde{d}n) - \frac{\partial}{\partial x}\left(\tilde{g}n\right)-\mu n
$$ {#eq-PDExs}
Note that while the diffusion rate was just rescaled by the factor of $1/w^2$ that should be expected from the transformation from $d^2/dw^2$ to $d^2/dx^2$, the growth rate also received an additional contribution from the diffusion.

# Numerical scheme for steady-state ODE {#sec-diffusion-numerical}

To achieve stability even where the diffusion is small compared to the advection, we should use an upwind difference scheme to solve the steady-state equation
$$
\frac12 \frac{\partial^2}{\partial x^2}(\tilde{d}n) - \frac{\partial}{\partial x}\left(\tilde{g}n\right)-\mu n=0.
$$ {#eq-ODE}
Our boundary conditions are
$$
n(x_0)=n_0,~~~~n(x_{max})=0.
$$ {#eq-bc}
where $x_{max}$ is some size that fish can never reach.

We use our equally-spaced grid with spacing $h$:
$x_i = x_0 + ih$ for $i=0,\dots,N+1$ such that $x_{N+1}=x_{max}$. Here $N$ is the number of internal grid points. We use the notation $n(x_i)=n_i$. The finite-difference approximations to the derivatives are
$$
\begin{split}
\left(\tilde{g}n\right)'(x_i)&\approx\frac{\tilde{g}_{i}n_{i}-\tilde{g}_{i-1}n_{i-1}}{h},\\
\left(\tilde{d}n\right)''(x_i)&=\frac{\tilde{d}_{i+1}n_{i+1}-2\tilde{d}_in_i+\tilde{d}_{i-1}n_{i-1}}{h^2},
\end{split}
$$ {#eq-finite-diff}
where $\tilde{g}_i = \tilde{g}(x_i)$ and $\tilde{d}_i = \tilde{d}(x_i)$ are the values of the rescaled growth and diffusion rates at the grid points $x_i$.
for $i=1,\dots, N$. Substituting this into the ODE and multiplying by $h^2$ gives us the linear system
$$
\frac{1}{2}\left(\tilde{d}_{i+1}n_{i+1}-2\tilde{d}_in_i+\tilde{d}_{i-1}n_{i-1}\right)-h\left(\tilde{g}_{i}n_{i}-\tilde{g}_{i-1}n_{i-1}\right) - h^2\mu_i n_i=0
$$ {#eq-ODE2}
which we can rewrite as
$$
U_i n_{i+1}+D_i n_i+L_i n_{i-1}=0
$$ {#eq-UDL}
with
$$
U_i=\frac{\tilde{d}_{i+1}}{2}, \qquad L_i=\frac{\tilde{d}_{i-1}}{2}+h\,\tilde{g}_{i-1} \qquad \text{ and }~~~D_i = -\tilde{d}_i - h\,\tilde{g}_i-h^2\mu_i
$$ {#eq-UDL2}
for $i=1,\dots,N$. 
This can be solved by making the Ansatz
$$
n_{i-1}=\alpha_in_i+\beta_i
$$ {#eq-alphabeta}
for $i=1,\dots N$, where $\alpha_i$ and $\beta_i$ are to be determined. Substituting @eq-alphabeta this into @eq-UDL gives
$$
U_in_{i+1}+(\alpha_iL_i+D_i)n_i+\beta_iL_i=0.
$$ {#eq-UDL2}
Similarly using $n_{i}=\alpha_{i+1}n_{i+1}+\beta_{i+1}$ in @eq-UDL2 gives
$$
\left[U_i + (\alpha_iL_i+D_i)\alpha_{i+1}\right]n_{i+1}+\left[(\alpha_iL_i+D_i)\beta_{i+1}+\beta_iL_i\right]=0.
$$ {#eq-UDL3}
We can satisfy this by making the expressions in the square brackets vanish, which gives us
$$
\alpha_{i+1}=-\frac{U_i}{\alpha_iL_i+D_i},\qquad \beta_{i+1}=-\frac{\beta_iL_i}{\alpha_iL_i+D_i}.
$$ {#eq-alphabetarecursion}
Looking at @eq-alphabeta for $i=1$, i.e., $n_0 = \alpha_1n_1+\beta_1$ we see that we can choose $\alpha_1=0$ and $\beta_1=n_0$.
We can now use @eq-alphabetarecursion to determine the all the $\alpha$s and $\beta$s.
Starting from the boundary condition $n_{N+1}=0$ we can then use @eq-alphabeta to determine the remaining $n_i$.

This scheme is known to be stable if $U_i,L_i>0$, $D_i<0$ and $U_i+L_i\leq -D_i$. These conditions on the signs are automatically satisfied if $\tilde{d},\tilde{g}$ and $\mu$ are all positive. The condition $U_i+L_i\leq -D_i$ is more subtle.

We implement this method in the function `solve_steady_state_upwind` as follows:

```{r}
solve_steady_state_upwind <- function(dtilde, gtilde, mu, n0, h) {
    # Number of interior points
    N <- length(dtilde) - 2
    
    # Calculate finite difference scheme coefficients
    U <- (dtilde / 2)[3:(N+2)]    # Upper diagonal
    L <- (dtilde / 2 + h * gtilde)[1:N]     # Lower diagonal 
    D <- (-dtilde - h * gtilde - h^2 * mu)[2:(N+1)]  # Main diagonal
    
    # Check stability conditions
    if (any(U <= 0) || any(L <= 0) || any(D >= 0)) {
        warning("Stability conditions not met.")
    }
    if (any(U + L > -D)) {
        warning("Stability condition U + L <= -D not met.")
    }
    
    # Solve using double sweep method
    return(solve_ode_double_sweep(U, L, D, n0))
}

# Helper function for double sweep method
solve_ode_double_sweep <- function(U, L, D, n0) {
    N <- length(D)  # Number of internal points
    if (length(U) != N || length(L) != N) {
        stop("U, L, and D must have the same length.")
    }
    # Initialize arrays for alpha and beta coefficients
    alpha <- numeric(N + 1)
    beta <- numeric(N + 1)
    
    # Initialize n array for solution
    n <- numeric(N + 1)
    n[N + 1] <- 0  # Boundary condition at x_max
    
    # Initial condition
    alpha[1] <- 0
    beta[1] <- n0
    
    # Forward sweep - calculate alpha and beta coefficients
    for (i in 1:N) {
        denom <- alpha[i] * L[i] + D[i]
        alpha[i + 1] <- -U[i] / denom
        beta[i + 1] <- -(beta[i] * L[i]) / denom
    }
    
    # Work backwards to get interior n values
    for (i in N:1) {
        n[i] <- alpha[i + 1] * n[i + 1] + beta[i + 1]
    }
    
    # Add initial value
    solution <- numeric(N + 2)
    solution[1] <- n0  # Set the first value to n0
    solution[2:(N + 2)] <- n  # Fill in the other points
    return(solution)
}
```


# Example {#sec-diffusion-NS}

We will now implement this in an example. We start with the North Sea Herring.

```{r}
species <- "Herring"
sps <- species_params(params)[species, ]
n <- sps$n
species_params(params)[species, ]$w_max <- 2 * sps$w_max
mu <- getMort(params)[species, ]
g <- getEGrowth(params)[species, ]
# At small size we have $g(w) = g_0 w^n$, hence $g_0 = g(w)/w^n$
g_0 <- g[1] / w[1]^n
```

We choose diffusion rate to be a power law with exponent $n+1$ which at small size satisfies $d(w) = 0.15 g(w) w$, see the example at the end of @sec-diffusion-example.

```{r}
d_0 <- 0.15 * g_0
d <- d_0 * w^(n + 1)
dtilde <- d / w^2
gtilde <- g / w - 0.5 * dtilde
```

We can now solve the ODE.
```{r}
n0 <- initialN(params)[species, 1] * w[1]
N_diffusion <- solve_steady_state_upwind(dtilde, gtilde, mu, n0, h) / w
```
Calculate solution with 0 diffusion for comparison
```{r}
dtilde_no_diffusion <- dtilde
dtilde_no_diffusion[] <- 1e-10
gtilde_no_diffusion <- g / w
N_no_diffusion <- solve_steady_state_upwind(dtilde_no_diffusion, 
                                            gtilde_no_diffusion, 
                                            mu, n0, h) / w
```

We will now plot the yield versus size for the two cases, with and without diffusion.

```{r}
p0 <- params
initialN(p0)[species, ] <- N_no_diffusion
y0 <- plotYieldVsSize(p0, species = species, x_var = "Length",
                      return_data = TRUE)[[1]] |>
    dplyr::filter(Type == "Model catch")
y0$Type <- "No diffusion"

p <- params
initialN(p)[species, ] <- N_diffusion
y <- plotYieldVsSize(p, species = species, x_var = "Length",
                     return_data = TRUE)[[1]] |>
    dplyr::filter(Type == "Model catch")
y$Type <- "With diffusion"
y <- rbind(y0, y)

ggplot(y, aes(x = l, y = `Catch density`, colour = Type)) +
    geom_line()
```


# Second-order finite-difference scheme

This section is here for historical reasons. The scheme described above is a first-order upwind scheme. It is stable but not very accurate. A second-order finite-difference scheme is more accurate but the way it is implemented here is not very stable. It is included here in case parts of it become useful later.

We could also write the PDE @eq-PDExs in a form where the derivatives act directly on $n$ by expanding
$$
\frac{\partial}{\partial x}\left(\tilde{g}n\right) = \tilde{g}'n + \tilde{g}n'
$$
and
$$
\frac12 \frac{\partial^2}{\partial x^2}(\tilde{d}n)=\frac12\tilde{d}''n+\tilde{d}'n'+\frac12\tilde{d}n''
$$
where we have denoted the derivative with respect to $x$ by a prime. Collecting terms gives
$$
\frac{\partial n}{\partial t} = \frac12 \tilde{d}n'' - \left(\tilde{g}-\tilde{d'}\right)n'-\left(\mu +\tilde{g}'-\frac12\tilde{d}''\right)n
$$
It is not clear that there is any advantage to this, but it is the way I originally did it so I will use this form of the equation here.

We can now obtain the steady-state abundance density by solving the second-order ODE
$$
an''-bn'-cn=0
$$
with 
$$
a = \frac12 \tilde{d},~~~~b=\tilde{g}-\tilde{d}',~~~~c=\mu +\tilde{g}'-\frac12\tilde{d}''.
$$
Our boundary conditions are
$$
n(x_0)=n_0,~~~~n(x_{max})=0.
$$
where $x_{max}$ is some size that fish can never reach.

We solve this with a second-order finite-difference scheme, using our equally-spaced grid with spacing $h$:
$x_i = x_0 + ih$ for $i=0,\dots,N+1$ such that $x_{N+1}=x_{max}$. We use the notation $n(x_i)=n_i$. The finite-difference approximations to the derivatives are
$$
n'(x_i)=\frac{n_{i+1}-n_{i-1}}{2h},~~~~n''(x_i)=\frac{n_{i+1}-2n_i+n_{i-1}}{h^2}.
$$
That gives us the linear system
$$
U_i n_{i+1}+D_i n_i+L_i n_{i-1}=0
$$ {#eq-UDL}
with
$$
U_i=a_i-\frac{h}{2}b_i, \qquad L_i=a_i+\frac{h}{2}b_i \qquad \text{ and }~~~D_i = -2a_i-h^2c_i
$$
for $i=1,\dots,N$. 
This can be solved by making the Ansatz
$$
n_{i-1}=\alpha_in_i+\beta_i
$$ {#eq-alphabeta}
for $i=1,\dots N$, where $\alpha_i$ and $\beta_i$ are to be determined. Substituting @eq-alphabeta this into @eq-UDL gives
$$
U_in_{i+1}+(\alpha_iL_i+D_i)n_i+\beta_iL_i=0.
$$ {#eq-UDL2}
Similarly using $n_{i}=\alpha_{i+1}n_{i+1}+\beta_{i+1}$ in @eq-UDL2 gives
$$
\left[U_i + (\alpha_iL_i+D_i)\alpha_{i+1}\right]n_{i+1}+\left[(\alpha_iL_i+D_i)\beta_{i+1}+\beta_iL_i\right]=0.
$$ {#eq-UDL3}
We can satisfy this by making the expressions in the square brackets vanish, which gives us
$$
\alpha_{i+1}=-\frac{U_i}{\alpha_iL_i+D_i},\qquad \beta_{i+1}=-\frac{\beta_iL_i}{\alpha_iL_i+D_i}.
$$ {#eq-alphabetarecursion}
Looking at @eq-alphabeta for $i=1$, i.e., $n_0 = \alpha_1n_1+\beta_1$ we see that we can choose $\alpha_1=0$ and $\beta_1=n_0$.
We can now use @eq-alphabetarecursion to determine the all the $\alpha$s and $\beta$s.
Starting from the boundary condition $n_{N+1}=0$ we can then use @eq-alphabeta to determine the remaining $n_i$.

This scheme is known to be stable if $U_i,L_i>0$, $D_i<0$ and $U_i+L_i\leq -D_i$. The requirement that $U_i>0$ gives us a maximum step size of
$$
h\leq\frac{\tilde{d}}{\tilde{g}-\tilde{d}'}.
$$

We implement this in the function `solve_steady_state_ode` as follows:

```{r}
solve_steady_state_ode <- function(a, b, c, n0, h) {
    # Number of interior points
    N <- length(a) - 1
    
    # Calculate finite difference scheme coefficients
    U <- a - h/2 * b     # Upper diagonal
    L <- a + h/2 * b     # Lower diagonal 
    D <- -2*a - h^2 * c  # Main diagonal
    
    # Check stability conditions
    if (any(U <= 0) || any(L <= 0) || any(D >= 0)) {
        warning("Stability conditions not met. Try reducing step size h.")
    }
    if (any(U + L > -D)) {
        warning("Stability condition U + L <= -D not met.")
    }
    
    # Solve using double sweep method
    n <- solve_ode_double_sweep(U, L, D, n0)
    
    return(n)
}
```

## Example

We will now implement this in an example. We start with the North Sea Herring.

```{r}
species <- "Herring"
sps <- species_params(params)[species, ]
n <- sps$n
m <- sps$m
w_mat <- sps$w_mat
U <- log(3) / log(w_mat / sps$w_mat25)
w_repro_max <- sps$w_repro_max
mu <- getMort(params)[species, ]
g <- getEGrowth(params)[species, ]
# At small size we have $g(w) = g_0 w^n$, hence $g_0 = g(w)/w^n$
g_0 <- g[1] / w[1]^n
```

We choose diffusion rate to be a power law with exponent $n+1$ which at small size satisfies $d(w) = 0.15 g(w) w$, see the example at the end of @sec-diffusion-example.

```{r}
d_0 <- 0.15 * g_0
d <- d_0 * w^(n + 1)
dtilde <- d / w^2
gtilde <- g / w - 0.5 * dtilde
```
To calculate the derivative of the growth rate we go back to the expression for the growth rate and calculate the derivatives of the terms in the expression. For simplicity we set metabolic loss to zero.
$$
g(w)=g_0w^n(1-\psi(w))
$$
where $\psi(w)$ is the proportion of available energy that is invested into reproduction.
$$
\psi(w) = \left(1+\left(\frac{w}{w_{mat}}\right)^{U}\right)^{-1}\left(\frac{w}{w_{repro\_max}}\right)^{m-n}
$$
For the derivative we get after some simplification (see [ChatGPT chat](https://chatgpt.com/share/678776f5-bf00-8007-9549-f1d186829235),
$$
\frac{d}{dw}g(w) = g_0 w^{n-1} \left( n - \frac{\left(m + (m - U)\left(\frac{w}{w_{\text{mat}}}\right)^U\right) \left(\frac{w}{w_{\text{repro\_max}}}\right)^{m-n}}{\left(1 + \left(\frac{w}{w_{\text{mat}}}\right)^U\right)^2} \right)
$$

```{r}
dgdw <- 
  g_0 * w^(n - 1) * (n - 
  (m + (m  - U) * (w / w_mat)^U) * (w / w_repro_max)^(m - n) / 
  (1 + (w / w_mat)^U)^2)
```

Now we calculate the parameters for the numerical scheme.
```{r}
dtildeprime <- (n - 1) * d_0 * w^(n - 2)
dtildepp <- (n - 2) * (n - 1) * d_0 * w^(n - 3)
gtildeprime <- dgdw - g / w - 0.5 * dtildeprime

a <- 0.5 * dtilde
b <- gtilde - dtildeprime
c <- mu + gtildeprime - 0.5 * dtildepp
```

We can now solve the ODE.

```r
n0 <- initialN(params)[species, 1] * w[1]
n <- solve_steady_state_ode(a, b, c, n0, h)
```


